version: 0.2

env:
  variables:
    AWS_REGION: "ca-central-1"
    ECR_REPO: "111376855663.dkr.ecr.ca-central-1.amazonaws.com/nodejs-app"
    CLUSTER_NAME: "nodejs-app-cluster"
    SERVICE_NAME: "nodejs-app-service"
    TASK_FAMILY: "nodejs-app-task"
    CONTAINER_NAME: "nodejs-app"
    CONTAINER_PORT: "3000"
    PRIVATE_SUBNETS: "subnet-0686a7945f162e8a9,subnet-039b1d151d108804e"
    PUBLIC_SUBNETS: "subnet-009e1d5349da6cd20,subnet-033ee837500a24a93"
    SECURITY_GROUP: "sg-0e35cf69a301ef039"   # ECS tasks SG
    LB_SECURITY_GROUP: "sg-062d00d677013000a"# ALB SG

phases:
  install:
    commands:
      - echo "Installing dependencies..."
      - yum install -y jq aws-cli docker

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

  build:
    commands:
      - echo "Preparing ECS deployment with ALB..."
      - IMAGE_URI="$ECR_REPO:latest"
     
      # 1. Create ECS cluster if it doesnâ€™t exist
      - |
        if ! aws ecs describe-clusters --clusters $CLUSTER_NAME --region $AWS_REGION | grep -q "ACTIVE"; then
          echo "Creating ECS cluster: $CLUSTER_NAME"
          aws ecs create-cluster --cluster-name $CLUSTER_NAME --region $AWS_REGION
        else
          echo "ECS cluster already exists: $CLUSTER_NAME"
        fi

      # 2. Register ECS task definition
      - |
        echo "Registering ECS task definition..."
        cat <<EOF > taskdef.json
        {
          "family": "$TASK_FAMILY",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::111376855663:role/LabRole",
          "taskRoleArn": "arn:aws:iam::111376855663:role/LabRole",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$IMAGE_URI",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": $CONTAINER_PORT,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/$TASK_FAMILY",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        aws ecs register-task-definition --cli-input-json file://taskdef.json

       # 3. Create or update ALB
      - |
        echo "Checking if ALB exists..."
        LB_CHECK=$(aws elbv2 describe-load-balancers --names nodejs-lb --region $AWS_REGION 2>/dev/null || true)
        
        if [ -z "$LB_CHECK" ]; then
          echo "Creating ALB..."
          LB_ARN=$(aws elbv2 create-load-balancer \
            --name nodejs-lb \
            --subnets $(echo $PUBLIC_SUBNETS | sed 's/,/ /g') \
            --security-groups $LB_SECURITY_GROUP \
            --scheme internet-facing \
            --region $AWS_REGION \
            --query 'LoadBalancers[0].LoadBalancerArn' \
            --output text)
          
          echo "Creating Target Group..."
          TG_ARN=$(aws elbv2 create-target-group \
            --name nodejs-tg \
            --port $CONTAINER_PORT \
            --protocol HTTP \
            --vpc-id vpc-0d9b94c746c48edd6 \
            --target-type ip \
            --health-check-path / \
            --region $AWS_REGION \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)
          
          echo "Creating Listener..."
          aws elbv2 create-listener \
            --load-balancer-arn $LB_ARN \
            --protocol HTTP \
            --port 80 \
            --default-actions Type=forward,TargetGroupArn=$TG_ARN \
            --region $AWS_REGION
        else
          echo "ALB already exists"
          LB_ARN=$(aws elbv2 describe-load-balancers --names nodejs-lb --region $AWS_REGION --query 'LoadBalancers[0].LoadBalancerArn' --output text)
          TG_ARN=$(aws elbv2 describe-target-groups --names nodejs-tg --region $AWS_REGION --query 'TargetGroups[0].TargetGroupArn' --output text)
        fi

      # 4. Create or update ECS service with ALB
      - |
        if ! aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $AWS_REGION | grep -q "ACTIVE"; then
          echo "Creating ECS service: $SERVICE_NAME"
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_FAMILY \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$PRIVATE_SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=DISABLED}" \
            --load-balancers "targetGroupArn=$TG_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT"
        else
          echo "Updating ECS service with new task definition..."
          NEW_TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF \
            --load-balancers "targetGroupArn=$TG_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT"
        fi

  post_build:
    commands:
      - echo "ECS + ALB deployment complete."
